syntax = "proto3";

package ssigmaapi.markethub.v1;

import "ssigmaapi/type/market.proto";
import "ssigmaapi/type/trade.proto";
import "ssigmaapi/type/orderbook.proto";
import "google/api/annotations.proto";

option go_package = "github.com/kaito2/ssigmaapigo/markethub/v1;markethub";

service MarketHubServiceV1 {
    rpc GetTrades (GetTradesRequest) returns (stream GetTradesResponse) {
        option (google.api.http) = {
            post: "/v1/market-hub/get-trades/{velocity_windowing_size}/{volatility_windowing_size}/{volume_windowing_size}"
            body: "*"
        };
    }
    rpc GetOrderBooks (GetOrderBooksRequest) returns (stream GetOrderBooksResponse) {
        option (google.api.http) = {
            post: "/v1/market-hub/get-order-books"
            body: "*"
        };
    }
    rpc GetTradesAndOrderBooks (GetTradesAndOrderBooksRequest) returns (stream GetTradesAndOrderBooksResponse) {
        option (google.api.http) = {
            post: "/v1/market-hub/get-trades-and-order-books"
            body: "*"
        };
    }
}

message GetTradesRequest {
    repeated ssigmaapi.type.Market markets = 1;
    // unit is seconds
    int64 velocity_windowing_size = 2;
    int64 volatility_windowing_size = 3;
    int64 volume_windowing_size = 4;
}

message GetTradesResponse {
    repeated TradesWithMarket trades_with_market = 1;
    repeated ExchangeStatus exchange_status = 2;
}

message GetOrderBooksRequest {
    repeated ssigmaapi.type.Market market = 1;
}

message GetOrderBooksResponse {
    repeated ssigmaapi.type.OrderBook all = 1;
    int64 timestamp = 2;
    repeated ExchangeStatus exchange_status = 3;
}

message GetTradesAndOrderBooksRequest {
    GetTradesRequest trades_req = 1;
    GetOrderBooksRequest orderbooks_req = 2;
}

message GetTradesAndOrderBooksResponse {
    GetTradesResponse trades_res = 1;
    GetOrderBooksResponse orderbooks_res = 2;
    repeated ExchangeStatus exchange_status = 3;
}

message TradeWithAdditionalInfo {
    ssigmaapi.type.Trade trade = 1;
    // 時間あたりの価格変化の移動平均
    double velocity = 2;
    double acceleration = 3;
    // 時間あたりの最大価格差
    double volatility = 4;
    double volume_base = 5;
    double volume_quote = 6;
    // 時間あたりの(buy_volume - sell_volume)/volume
    double momentum_rate = 7;
    int64 velocity_windowing_size = 8;
    int64 volatility_windowing_size = 9;
    int64 volume_windowing_size = 10;
}

message TradesWithMarket {
    ssigmaapi.type.Market market = 1;
    repeated TradeWithAdditionalInfo trades = 2;
}

message ExchangeStatus {
    string exchange = 1;
    bool open = 2;
}